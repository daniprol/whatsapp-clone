{"version":3,"sources":["firebase-config.js","SidebarChat.js","NewChatForm.js","StateProvider.js","Sidebar.js","reducer.js","Login.js","ChatMessage.js","Chat.js","App.js","serviceWorker.js","index.js","logo.svg"],"names":["db","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","firestore","auth","provider","GoogleAuthProvider","SidebarChat","id","name","useState","messages","setMessages","useEffect","collection","doc","orderBy","onSnapshot","snapshot","docs","map","data","to","className","Avatar","src","message","NewChatForm","open","setOpen","newChatName","setNewChatName","emptyInput","setEmptyInput","handleClose","onClick","Dialog","onClose","aria-labelledby","onSubmit","e","preventDefault","add","DialogTitle","DialogContent","TextField","autoFocus","margin","label","type","value","onChange","target","error","helperText","fullWidth","DialogActions","Button","color","disabled","StateContext","createContext","StateProvider","reducer","initialState","children","Provider","useReducer","useStateValue","useContext","Sidebar","rooms","setRooms","user","unsubscribe","photoURL","IconButton","placeholder","room","key","actionTypes","state","action","console","log","Login","dispatch","Logo","alt","signInWithPopup","then","result","catch","alert","ChatMessage","messageUser","messageString","messageTimestamp","isOwnMessage","Chat","input","setInput","roomId","useParams","roomName","setRoomName","roomMessages","setRoomMessages","length","timestamp","toDate","toLocaleTimeString","hour","minute","AttachFile","displayName","FieldValue","serverTimestamp","App","indexPage","basename","process","exact","path","loginPage","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.8fbdfaab.chunk.js","sourcesContent":["import firebase from \"firebase\";\r\n\r\nconst firebaseConfig = {\r\n  apiKey: \"AIzaSyAXkkc0tG-cdIQBcCoXbKmTiV-QakTXvNo\",\r\n  authDomain: \"whatsapp-clone-cdce0.firebaseapp.com\",\r\n  databaseURL: \"https://whatsapp-clone-cdce0.firebaseio.com\",\r\n  projectId: \"whatsapp-clone-cdce0\",\r\n  storageBucket: \"whatsapp-clone-cdce0.appspot.com\",\r\n  messagingSenderId: \"861840966732\",\r\n  appId: \"1:861840966732:web:7eb24a232e622a3c51e0e9\",\r\n  measurementId: \"G-ZXR0VEMHF8\",\r\n};\r\n\r\nconst firebaseApp = firebase.initializeApp(firebaseConfig);\r\n\r\nconst db = firebaseApp.firestore();\r\nconst auth = firebase.auth();\r\nconst provider = new firebase.auth.GoogleAuthProvider();\r\n\r\nexport { auth, provider };\r\nexport default db;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport \"./SidebarChat.css\";\r\nimport { Avatar } from \"@material-ui/core\";\r\nimport db from \"./firebase-config\";\r\n\r\nfunction SidebarChat({ id, name }) {\r\n  // const [seed, setSeed] = useState(\"\");\r\n  const [messages, setMessages] = useState([]);\r\n\r\n  // useEffect(() => {\r\n  // const randomString = Math.random()\r\n  //   .toString(36)\r\n  //   .replace(/[^a-z]+/g, \"\");\r\n  // setSeed(randomString);\r\n  // }, []);\r\n  //   console.log(randomString);\r\n  useEffect(() => {\r\n    if (id) {\r\n      db.collection(\"rooms\")\r\n        .doc(id)\r\n        .collection(\"messages\")\r\n        .orderBy(\"timestamp\", \"desc\")\r\n        .onSnapshot((snapshot) =>\r\n          setMessages(snapshot.docs.map((doc) => doc.data()))\r\n        );\r\n      // console.log(messages);\r\n    }\r\n  }, [id]);\r\n  return (\r\n    <Link to={`/rooms/${id}`}>\r\n      <div className=\"sidebarChat\">\r\n        <Avatar src={`https://avatars.dicebear.com/api/human/${id}.svg`} />\r\n        <div className=\"sidebarChat__info\">\r\n          <h2>{name}</h2>\r\n          <p>{messages[0]?.message}</p>\r\n        </div>\r\n      </div>\r\n    </Link>\r\n  );\r\n}\r\n\r\nexport default SidebarChat;\r\n","import React, { useState } from \"react\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport DialogActions from \"@material-ui/core/DialogActions\";\r\nimport DialogContent from \"@material-ui/core/DialogContent\";\r\n// import DialogContentText from \"@material-ui/core/DialogContentText\";\r\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\r\nimport \"./SidebarChat.css\";\r\nimport db from \"./firebase-config\";\r\n\r\nexport default function NewChatForm() {\r\n  const [open, setOpen] = useState(false);\r\n  const [newChatName, setNewChatName] = useState(\"\");\r\n  const [emptyInput, setEmptyInput] = useState(false);\r\n\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n    setNewChatName(\"\");\r\n    setEmptyInput(\"\");\r\n  };\r\n\r\n  const newChatModal = () => {\r\n    setOpen(true);\r\n  };\r\n\r\n  const addNewChat = () => {\r\n    if (newChatName !== \"\") {\r\n      db.collection(\"rooms\").add({\r\n        name: newChatName,\r\n      });\r\n    }\r\n    handleClose();\r\n  };\r\n  return (\r\n    <div>\r\n      <div className=\"sidebarChat\" onClick={newChatModal}>\r\n        <h2>Add new chat</h2>\r\n      </div>\r\n      <Dialog\r\n        open={open}\r\n        onClose={handleClose}\r\n        aria-labelledby=\"form-dialog-title\"\r\n      >\r\n        <form\r\n          onSubmit={(e) => {\r\n            e.preventDefault();\r\n            addNewChat();\r\n          }}\r\n        >\r\n          <DialogTitle id=\"form-dialog-title\">Add New Chat</DialogTitle>\r\n          <DialogContent>\r\n            {/* <DialogContentText>Enter name of the chat room</DialogContentText> */}\r\n            <TextField\r\n              autoFocus\r\n              margin=\"dense\"\r\n              id=\"chatRoom\"\r\n              label=\"Chat Room\"\r\n              type=\"text\"\r\n              value={newChatName}\r\n              onChange={(e) => {\r\n                setNewChatName(e.target.value);\r\n                if (e.target.value === \"\") {\r\n                  setEmptyInput(true);\r\n                } else {\r\n                  setEmptyInput(false);\r\n                }\r\n              }}\r\n              // error={newChatName === \"\"}\r\n              error={emptyInput}\r\n              helperText={emptyInput ? \"Room must have a name\" : \" \"}\r\n              fullWidth\r\n              // onBlur={(e) => {\r\n              //   newChatName === \"\" ? setEmptyInput(true) : setEmptyInput(false);\r\n              // }}\r\n            />\r\n          </DialogContent>\r\n          <DialogActions>\r\n            <Button onClick={handleClose} color=\"primary\">\r\n              Cancel\r\n            </Button>\r\n            <Button\r\n              disabled={newChatName === \"\"}\r\n              // onClick={addNewChat}\r\n              type=\"submit\"\r\n              color=\"primary\"\r\n            >\r\n              Create\r\n            </Button>\r\n          </DialogActions>\r\n        </form>\r\n      </Dialog>\r\n    </div>\r\n  );\r\n}\r\n","import React, { createContext, useReducer, useContext } from \"react\";\r\n\r\nexport const StateContext = createContext();\r\n\r\nexport const StateProvider = ({ reducer, initialState, children }) => (\r\n  <StateContext.Provider value={useReducer(reducer, initialState)}>\r\n    {children}\r\n  </StateContext.Provider>\r\n);\r\n\r\nexport const useStateValue = () => useContext(StateContext);\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { Avatar, IconButton } from \"@material-ui/core\";\r\nimport DonutLargeIcon from \"@material-ui/icons/DonutLarge\";\r\nimport ChatIcon from \"@material-ui/icons/Chat\";\r\nimport MoreVertIcon from \"@material-ui/icons/MoreVert\";\r\nimport SearchOutlined from \"@material-ui/icons/SearchOutlined\";\r\nimport SidebarChat from \"./SidebarChat\";\r\nimport NewChatForm from \"./NewChatForm\";\r\nimport \"./Sidebar.css\";\r\nimport db from \"./firebase-config\";\r\nimport { useStateValue } from \"./StateProvider\";\r\n\r\nfunction Sidebar() {\r\n  const [rooms, setRooms] = useState([]);\r\n  const [{ user }, dispatch] = useStateValue();\r\n\r\n  useEffect(() => {\r\n    const unsubscribe = db.collection(\"rooms\").onSnapshot((snapshot) =>\r\n      setRooms(\r\n        snapshot.docs.map((doc) => ({\r\n          id: doc.id,\r\n          data: doc.data(),\r\n        }))\r\n      )\r\n    );\r\n\r\n    return () => {\r\n      // Dettach the event listeners when we are finished\r\n      unsubscribe();\r\n    };\r\n  }, []);\r\n  // console.log(rooms);\r\n  return (\r\n    <div className=\"sidebar\">\r\n      <div className=\"sidebar__header\">\r\n        <Avatar src={user?.photoURL} />\r\n        {/* We are using optional chaining with user?.photoURL so it doesn't break if there's no photo url */}\r\n        <div className=\"sidebar__headerRight\">\r\n          <IconButton>\r\n            <DonutLargeIcon />\r\n          </IconButton>\r\n          <IconButton>\r\n            <ChatIcon />\r\n          </IconButton>\r\n          <IconButton>\r\n            <MoreVertIcon />\r\n          </IconButton>\r\n        </div>\r\n      </div>\r\n      <div className=\"sidebar__search\">\r\n        <div className=\"sidebar__searchContainer\">\r\n          <SearchOutlined />\r\n          <input placeholder=\"Search or start new chat\" type=\"text\" />\r\n        </div>\r\n      </div>\r\n      <div className=\"sidebar__chats\">\r\n        <NewChatForm />\r\n        {rooms.map((room) => (\r\n          <SidebarChat key={room.id} id={room.id} name={room.data.name} />\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Sidebar;\r\n","export const initialState = {\r\n  user: null,\r\n};\r\n\r\nexport const actionTypes = {\r\n  SET_USER: \"SET_USER\",\r\n};\r\n\r\nconst reducer = (state, action) => {\r\n  console.log(action);\r\n  switch (action.type) {\r\n    case actionTypes.SET_USER:\r\n      return {\r\n        ...state,\r\n        user: action.user,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default reducer;\r\n","import React from \"react\";\r\nimport \"./Login.css\";\r\nimport { Button } from \"@material-ui/core\";\r\nimport Logo from \"./logo.svg\";\r\nimport { auth, provider } from \"./firebase-config\";\r\nimport { useStateValue } from \"./StateProvider\";\r\nimport { actionTypes } from \"./reducer\";\r\n\r\nfunction Login() {\r\n  const [state, dispatch] = useStateValue();\r\n  // We can also do destructuring\r\n\r\n  const signIn = () => {\r\n    auth\r\n      .signInWithPopup(provider)\r\n      .then((result) =>\r\n        dispatch({\r\n          type: actionTypes.SET_USER,\r\n          user: result.user,\r\n        })\r\n      )\r\n      .catch((error) => alert(error.message));\r\n  };\r\n  return (\r\n    <div className=\"login\">\r\n      <div className=\"login__container\">\r\n        <img\r\n          src={Logo}\r\n          alt=\"Whatsapp logo\"\r\n          //   styles={{ background: \"transparent\" }}\r\n        />\r\n        <div className=\"login_text\">\r\n          <h1>Sign in to WhatsApp</h1>\r\n        </div>\r\n\r\n        <Button type=\"submit\" onClick={signIn}>\r\n          Sign In with Google\r\n        </Button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Login;\r\n","import React from \"react\";\r\nimport \"./Chat.css\";\r\n\r\nconst ChatMessage = ({\r\n  messageUser,\r\n  messageString,\r\n  messageTimestamp,\r\n  isOwnMessage,\r\n}) => {\r\n  return (\r\n    <p className={`chat__message ${isOwnMessage ? \"chat__receiver\" : \"\"}`}>\r\n      {isOwnMessage ? null : <span className=\"chat__name\">{messageUser}</span>}\r\n      {messageString}\r\n      <span className=\"chat__timestamp\">{messageTimestamp}</span>\r\n    </p>\r\n  );\r\n};\r\n\r\nexport default ChatMessage;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport db from \"./firebase-config\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport \"./Chat.css\";\r\nimport { Avatar, IconButton } from \"@material-ui/core\";\r\nimport { AttachFile, MoreVert, SearchOutlined } from \"@material-ui/icons\";\r\nimport InsertEmoticonIcon from \"@material-ui/icons/InsertEmoticon\";\r\nimport MicIcon from \"@material-ui/icons/Mic\";\r\nimport { useStateValue } from \"./StateProvider\";\r\nimport firebase from \"firebase\";\r\nimport ChatMessage from \"./ChatMessage\";\r\n\r\nfunction Chat() {\r\n  // const [seed, setSeed] = useState(\"\");\r\n  const [input, setInput] = useState(\"\");\r\n  const { roomId } = useParams();\r\n  const [roomName, setRoomName] = useState(\"\");\r\n  const [roomMessages, setRoomMessages] = useState([]);\r\n\r\n  const [{ user }, dispatch] = useStateValue();\r\n  useEffect(() => {\r\n    if (roomId) {\r\n      db.collection(\"rooms\")\r\n        .doc(roomId)\r\n        .onSnapshot(\r\n          (snapshot) => setRoomName(snapshot.data().name)\r\n          // usually we do snapshot.docs.map(doc=>...doc.data()) but here we already have a doc, so: snapshot.data().name\r\n        );\r\n\r\n      db.collection(\"rooms\")\r\n        .doc(roomId)\r\n        .collection(\"messages\")\r\n        .orderBy(\"timestamp\", \"asc\")\r\n        .onSnapshot((snapshot) =>\r\n          setRoomMessages(snapshot.docs.map((doc) => doc.data()))\r\n        );\r\n    }\r\n    // console.log(roomMessages);\r\n  }, [roomId]); // IMPORTANT: we need to use this hook everytime we request a new chat room in the route. Otherwise it would only load the correct chat the first time!\r\n\r\n  // useEffect(() => {\r\n  // const randomString = Math.random()\r\n  //   .toString(36)\r\n  //   .replace(/[^a-z]+/g, \"\");\r\n  // setSeed(randomString);\r\n  // }, [roomId]);\r\n\r\n  const sendMessage = (e) => {\r\n    e.preventDefault();\r\n    // console.log(user.displayName);\r\n    // console.log(roomId);\r\n    // console.log(\"You tiped: \", input);\r\n    if (roomId) {\r\n      db.collection(\"rooms\").doc(roomId).collection(\"messages\").add({\r\n        user: user.displayName,\r\n        message: input,\r\n        timestamp: firebase.firestore.FieldValue.serverTimestamp(),\r\n      });\r\n    }\r\n    setInput(\"\");\r\n  };\r\n\r\n  return (\r\n    <div className=\"chat\">\r\n      <div className=\"chat__header\">\r\n        <Avatar src={`https://avatars.dicebear.com/api/human/${roomId}.svg`} />\r\n        <div className=\"chat__headerInfo\">\r\n          <h3>{roomName}</h3>\r\n          <p>\r\n            Last seen{\" \"}\r\n            {\r\n              // new Date(\r\n              roomMessages[roomMessages.length - 1]?.timestamp\r\n                ?.toDate()\r\n                .toLocaleTimeString([], { hour: \"2-digit\", minute: \"2-digit\" })\r\n              // )\r\n            }\r\n          </p>\r\n        </div>\r\n        <div className=\"chat__headerRight\">\r\n          <IconButton>\r\n            <SearchOutlined />\r\n          </IconButton>\r\n          <IconButton>\r\n            <AttachFile />\r\n          </IconButton>\r\n          <IconButton>\r\n            <MoreVert />\r\n          </IconButton>\r\n        </div>\r\n      </div>\r\n      <div className=\"chat__body\">\r\n        {roomMessages.map((message) => (\r\n          <ChatMessage\r\n            messageUser={message.user}\r\n            messageString={message.message}\r\n            messageTimestamp={message.timestamp\r\n              ?.toDate()\r\n              .toLocaleTimeString([], { hour: \"2-digit\", minute: \"2-digit\" })}\r\n            // key={message.timestamp?.seconds}\r\n            key={message.message}\r\n            isOwnMessage={message.user === user.displayName}\r\n          />\r\n        ))}\r\n        {/* <p className=\"chat__message\">\r\n          <span className=\"chat__name\">Dani Prol</span>\r\n          Hey guys\r\n          <span className=\"chat__timestamp\">3:52pm</span>\r\n        </p>\r\n        <p className={`chat__message ${true && \"chat__receiver\"}`}>\r\n          Hey what's up?\r\n          <span className=\"chat__timestamp\">3:53pm</span>\r\n        </p> */}\r\n      </div>\r\n      <div className=\"chat__footer\">\r\n        <InsertEmoticonIcon />\r\n        <form>\r\n          {/* The main reason we are using a form here is because we want to have the ENTER functionality */}\r\n          <input\r\n            value={input}\r\n            onChange={(e) => setInput(e.target.value)}\r\n            type=\"text\"\r\n            placeholder=\"Type a message\"\r\n          />\r\n          <button onClick={sendMessage}>Send</button>\r\n        </form>\r\n        <MicIcon />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Chat;\r\n","import React from \"react\";\r\nimport Sidebar from \"./Sidebar\";\r\nimport Login from \"./Login\";\r\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\r\n// import { HashRouter as Router, Switch, Route } from \"react-router-dom\";\r\nimport Chat from \"./Chat\";\r\nimport { useStateValue } from \"./StateProvider\";\r\nimport \"./App.css\";\r\n\r\nfunction App() {\r\n  // const [user, setUser] = useState(null);\r\n  // const [state, dispatch] = useStateValue();\r\n  // We can also do destructuring directly:\r\n  const [{ user }, dispatch] = useStateValue();\r\n\r\n  const indexPage = (\r\n    <div className=\"app__body\">\r\n      <Router basename={process.env.PUBLIC_URL}>\r\n        {/* Sidebar */}\r\n        <Sidebar />\r\n        <Switch>\r\n          <Route exact path=\"/\">\r\n            <Chat />\r\n          </Route>\r\n          <Route path=\"/rooms/:roomId\">\r\n            {/* Chat */}\r\n            <Chat />\r\n          </Route>\r\n          {/* <Route path=\"/\">\r\n              <h1>Home screen</h1>\r\n            </Route> */}\r\n        </Switch>\r\n      </Router>\r\n    </div>\r\n  );\r\n\r\n  const loginPage = <Login />;\r\n  return <div className=\"app\">{!user ? loginPage : indexPage}</div>;\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nimport reducer, { initialState } from \"./reducer\";\r\nimport { StateProvider } from \"./StateProvider\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <StateProvider initialState={initialState} reducer={reducer}>\r\n      <App />\r\n    </StateProvider>\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","module.exports = __webpack_public_path__ + \"static/media/logo.ba90dc77.svg\";"],"sourceRoot":""}